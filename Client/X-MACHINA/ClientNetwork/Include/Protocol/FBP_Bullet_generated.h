// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPBULLET_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPBULLET_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_Bullet_OnShoot;
struct CPkt_Bullet_OnShootBuilder;

struct SPkt_Bullet_OnShoot;
struct SPkt_Bullet_OnShootBuilder;

struct CPkt_Bullet_OnHitEnemy;
struct CPkt_Bullet_OnHitEnemyBuilder;

struct SPkt_Bullet_OnHitEnemy;
struct SPkt_Bullet_OnHitEnemyBuilder;

struct CPkt_Bullet_OnHitExpEnemy;
struct CPkt_Bullet_OnHitExpEnemyBuilder;

struct SPkt_Bullet_OnHitExpEnemy;
struct SPkt_Bullet_OnHitExpEnemyBuilder;

struct CPkt_Bullet_OnCollision;
struct CPkt_Bullet_OnCollisionBuilder;

struct SPkt_Bullet_OnCollision;
struct SPkt_Bullet_OnCollisionBuilder;

struct CPkt_Bullet_OnShoot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Bullet_OnShootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRE_POS = 4,
    VT_FIRE_DIR = 6
  };
  const FBProtocol::Vector3 *fire_pos() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_FIRE_POS);
  }
  const FBProtocol::Vector3 *fire_dir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_FIRE_DIR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIRE_POS) &&
           verifier.VerifyTable(fire_pos()) &&
           VerifyOffset(verifier, VT_FIRE_DIR) &&
           verifier.VerifyTable(fire_dir()) &&
           verifier.EndTable();
  }
};

struct CPkt_Bullet_OnShootBuilder {
  typedef CPkt_Bullet_OnShoot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fire_pos(::flatbuffers::Offset<FBProtocol::Vector3> fire_pos) {
    fbb_.AddOffset(CPkt_Bullet_OnShoot::VT_FIRE_POS, fire_pos);
  }
  void add_fire_dir(::flatbuffers::Offset<FBProtocol::Vector3> fire_dir) {
    fbb_.AddOffset(CPkt_Bullet_OnShoot::VT_FIRE_DIR, fire_dir);
  }
  explicit CPkt_Bullet_OnShootBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Bullet_OnShoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Bullet_OnShoot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Bullet_OnShoot> CreateCPkt_Bullet_OnShoot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Vector3> fire_pos = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> fire_dir = 0) {
  CPkt_Bullet_OnShootBuilder builder_(_fbb);
  builder_.add_fire_dir(fire_dir);
  builder_.add_fire_pos(fire_pos);
  return builder_.Finish();
}

struct SPkt_Bullet_OnShoot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Bullet_OnShootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_GUN_ID = 6,
    VT_BULLET_ID = 8,
    VT_FIRE_POS = 10,
    VT_FIRE_DIR = 12
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  uint32_t gun_id() const {
    return GetField<uint32_t>(VT_GUN_ID, 0);
  }
  uint32_t bullet_id() const {
    return GetField<uint32_t>(VT_BULLET_ID, 0);
  }
  const FBProtocol::Vector3 *fire_pos() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_FIRE_POS);
  }
  const FBProtocol::Vector3 *fire_dir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_FIRE_DIR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_GUN_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_BULLET_ID, 4) &&
           VerifyOffset(verifier, VT_FIRE_POS) &&
           verifier.VerifyTable(fire_pos()) &&
           VerifyOffset(verifier, VT_FIRE_DIR) &&
           verifier.VerifyTable(fire_dir()) &&
           verifier.EndTable();
  }
};

struct SPkt_Bullet_OnShootBuilder {
  typedef SPkt_Bullet_OnShoot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnShoot::VT_PLAYER_ID, player_id, 0);
  }
  void add_gun_id(uint32_t gun_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnShoot::VT_GUN_ID, gun_id, 0);
  }
  void add_bullet_id(uint32_t bullet_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnShoot::VT_BULLET_ID, bullet_id, 0);
  }
  void add_fire_pos(::flatbuffers::Offset<FBProtocol::Vector3> fire_pos) {
    fbb_.AddOffset(SPkt_Bullet_OnShoot::VT_FIRE_POS, fire_pos);
  }
  void add_fire_dir(::flatbuffers::Offset<FBProtocol::Vector3> fire_dir) {
    fbb_.AddOffset(SPkt_Bullet_OnShoot::VT_FIRE_DIR, fire_dir);
  }
  explicit SPkt_Bullet_OnShootBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Bullet_OnShoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Bullet_OnShoot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Bullet_OnShoot> CreateSPkt_Bullet_OnShoot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    uint32_t gun_id = 0,
    uint32_t bullet_id = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> fire_pos = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> fire_dir = 0) {
  SPkt_Bullet_OnShootBuilder builder_(_fbb);
  builder_.add_fire_dir(fire_dir);
  builder_.add_fire_pos(fire_pos);
  builder_.add_bullet_id(bullet_id);
  builder_.add_gun_id(gun_id);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct CPkt_Bullet_OnHitEnemy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Bullet_OnHitEnemyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_FIRE_POS = 6,
    VT_RAY = 8
  };
  int32_t monster_id() const {
    return GetField<int32_t>(VT_MONSTER_ID, 0);
  }
  const FBProtocol::Vector3 *fire_pos() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_FIRE_POS);
  }
  const FBProtocol::Vector3 *ray() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_RAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_FIRE_POS) &&
           verifier.VerifyTable(fire_pos()) &&
           VerifyOffset(verifier, VT_RAY) &&
           verifier.VerifyTable(ray()) &&
           verifier.EndTable();
  }
};

struct CPkt_Bullet_OnHitEnemyBuilder {
  typedef CPkt_Bullet_OnHitEnemy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(int32_t monster_id) {
    fbb_.AddElement<int32_t>(CPkt_Bullet_OnHitEnemy::VT_MONSTER_ID, monster_id, 0);
  }
  void add_fire_pos(::flatbuffers::Offset<FBProtocol::Vector3> fire_pos) {
    fbb_.AddOffset(CPkt_Bullet_OnHitEnemy::VT_FIRE_POS, fire_pos);
  }
  void add_ray(::flatbuffers::Offset<FBProtocol::Vector3> ray) {
    fbb_.AddOffset(CPkt_Bullet_OnHitEnemy::VT_RAY, ray);
  }
  explicit CPkt_Bullet_OnHitEnemyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Bullet_OnHitEnemy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Bullet_OnHitEnemy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Bullet_OnHitEnemy> CreateCPkt_Bullet_OnHitEnemy(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t monster_id = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> fire_pos = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> ray = 0) {
  CPkt_Bullet_OnHitEnemyBuilder builder_(_fbb);
  builder_.add_ray(ray);
  builder_.add_fire_pos(fire_pos);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct SPkt_Bullet_OnHitEnemy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Bullet_OnHitEnemyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_GUN_ID = 6,
    VT_BULLET_ID = 8,
    VT_RAY = 10
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  uint32_t gun_id() const {
    return GetField<uint32_t>(VT_GUN_ID, 0);
  }
  uint32_t bullet_id() const {
    return GetField<uint32_t>(VT_BULLET_ID, 0);
  }
  const FBProtocol::Vector3 *ray() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_RAY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_GUN_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_BULLET_ID, 4) &&
           VerifyOffset(verifier, VT_RAY) &&
           verifier.VerifyTable(ray()) &&
           verifier.EndTable();
  }
};

struct SPkt_Bullet_OnHitEnemyBuilder {
  typedef SPkt_Bullet_OnHitEnemy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnHitEnemy::VT_PLAYER_ID, player_id, 0);
  }
  void add_gun_id(uint32_t gun_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnHitEnemy::VT_GUN_ID, gun_id, 0);
  }
  void add_bullet_id(uint32_t bullet_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnHitEnemy::VT_BULLET_ID, bullet_id, 0);
  }
  void add_ray(::flatbuffers::Offset<FBProtocol::Vector3> ray) {
    fbb_.AddOffset(SPkt_Bullet_OnHitEnemy::VT_RAY, ray);
  }
  explicit SPkt_Bullet_OnHitEnemyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Bullet_OnHitEnemy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Bullet_OnHitEnemy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Bullet_OnHitEnemy> CreateSPkt_Bullet_OnHitEnemy(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    uint32_t gun_id = 0,
    uint32_t bullet_id = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> ray = 0) {
  SPkt_Bullet_OnHitEnemyBuilder builder_(_fbb);
  builder_.add_ray(ray);
  builder_.add_bullet_id(bullet_id);
  builder_.add_gun_id(gun_id);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct CPkt_Bullet_OnHitExpEnemy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Bullet_OnHitExpEnemyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4
  };
  int32_t monster_id() const {
    return GetField<int32_t>(VT_MONSTER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MONSTER_ID, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_Bullet_OnHitExpEnemyBuilder {
  typedef CPkt_Bullet_OnHitExpEnemy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(int32_t monster_id) {
    fbb_.AddElement<int32_t>(CPkt_Bullet_OnHitExpEnemy::VT_MONSTER_ID, monster_id, 0);
  }
  explicit CPkt_Bullet_OnHitExpEnemyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Bullet_OnHitExpEnemy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Bullet_OnHitExpEnemy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Bullet_OnHitExpEnemy> CreateCPkt_Bullet_OnHitExpEnemy(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t monster_id = 0) {
  CPkt_Bullet_OnHitExpEnemyBuilder builder_(_fbb);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct SPkt_Bullet_OnHitExpEnemy FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Bullet_OnHitExpEnemyBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SPkt_Bullet_OnHitExpEnemyBuilder {
  typedef SPkt_Bullet_OnHitExpEnemy Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit SPkt_Bullet_OnHitExpEnemyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Bullet_OnHitExpEnemy> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Bullet_OnHitExpEnemy>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Bullet_OnHitExpEnemy> CreateSPkt_Bullet_OnHitExpEnemy(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  SPkt_Bullet_OnHitExpEnemyBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CPkt_Bullet_OnCollision FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Bullet_OnCollisionBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_Bullet_OnCollisionBuilder {
  typedef CPkt_Bullet_OnCollision Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_Bullet_OnCollisionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Bullet_OnCollision> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Bullet_OnCollision>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Bullet_OnCollision> CreateCPkt_Bullet_OnCollision(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_Bullet_OnCollisionBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_Bullet_OnCollision FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Bullet_OnCollisionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_GUN_ID = 6,
    VT_BULLET_ID = 8
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  FBProtocol::ITEM_TYPE gun_id() const {
    return static_cast<FBProtocol::ITEM_TYPE>(GetField<uint8_t>(VT_GUN_ID, 0));
  }
  uint32_t bullet_id() const {
    return GetField<uint32_t>(VT_BULLET_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_GUN_ID, 1) &&
           VerifyField<uint32_t>(verifier, VT_BULLET_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Bullet_OnCollisionBuilder {
  typedef SPkt_Bullet_OnCollision Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnCollision::VT_PLAYER_ID, player_id, 0);
  }
  void add_gun_id(FBProtocol::ITEM_TYPE gun_id) {
    fbb_.AddElement<uint8_t>(SPkt_Bullet_OnCollision::VT_GUN_ID, static_cast<uint8_t>(gun_id), 0);
  }
  void add_bullet_id(uint32_t bullet_id) {
    fbb_.AddElement<uint32_t>(SPkt_Bullet_OnCollision::VT_BULLET_ID, bullet_id, 0);
  }
  explicit SPkt_Bullet_OnCollisionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Bullet_OnCollision> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Bullet_OnCollision>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Bullet_OnCollision> CreateSPkt_Bullet_OnCollision(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    FBProtocol::ITEM_TYPE gun_id = FBProtocol::ITEM_TYPE_NONE,
    uint32_t bullet_id = 0) {
  SPkt_Bullet_OnCollisionBuilder builder_(_fbb);
  builder_.add_bullet_id(bullet_id);
  builder_.add_player_id(player_id);
  builder_.add_gun_id(gun_id);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPBULLET_FBPROTOCOL_H_
