// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPCUSTOM_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPCUSTOM_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct SPkt_Custom;
struct SPkt_CustomBuilder;

struct CPkt_Custom;
struct CPkt_CustomBuilder;

struct SPkt_Custom FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_CustomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_TROOPERSKIN = 6
  };
  int32_t player_id() const {
    return GetField<int32_t>(VT_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *trooperskin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TROOPERSKIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyOffset(verifier, VT_TROOPERSKIN) &&
           verifier.VerifyString(trooperskin()) &&
           verifier.EndTable();
  }
};

struct SPkt_CustomBuilder {
  typedef SPkt_Custom Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(int32_t player_id) {
    fbb_.AddElement<int32_t>(SPkt_Custom::VT_PLAYER_ID, player_id, 0);
  }
  void add_trooperskin(::flatbuffers::Offset<::flatbuffers::String> trooperskin) {
    fbb_.AddOffset(SPkt_Custom::VT_TROOPERSKIN, trooperskin);
  }
  explicit SPkt_CustomBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Custom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Custom>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Custom> CreateSPkt_Custom(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trooperskin = 0) {
  SPkt_CustomBuilder builder_(_fbb);
  builder_.add_trooperskin(trooperskin);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_Custom> CreateSPkt_CustomDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t player_id = 0,
    const char *trooperskin = nullptr) {
  auto trooperskin__ = trooperskin ? _fbb.CreateString(trooperskin) : 0;
  return FBProtocol::CreateSPkt_Custom(
      _fbb,
      player_id,
      trooperskin__);
}

struct CPkt_Custom FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_CustomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TROOPERSKIN = 4
  };
  const ::flatbuffers::String *trooperskin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TROOPERSKIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TROOPERSKIN) &&
           verifier.VerifyString(trooperskin()) &&
           verifier.EndTable();
  }
};

struct CPkt_CustomBuilder {
  typedef CPkt_Custom Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_trooperskin(::flatbuffers::Offset<::flatbuffers::String> trooperskin) {
    fbb_.AddOffset(CPkt_Custom::VT_TROOPERSKIN, trooperskin);
  }
  explicit CPkt_CustomBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Custom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Custom>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Custom> CreateCPkt_Custom(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> trooperskin = 0) {
  CPkt_CustomBuilder builder_(_fbb);
  builder_.add_trooperskin(trooperskin);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CPkt_Custom> CreateCPkt_CustomDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *trooperskin = nullptr) {
  auto trooperskin__ = trooperskin ? _fbb.CreateString(trooperskin) : 0;
  return FBProtocol::CreateCPkt_Custom(
      _fbb,
      trooperskin__);
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPCUSTOM_FBPROTOCOL_H_
