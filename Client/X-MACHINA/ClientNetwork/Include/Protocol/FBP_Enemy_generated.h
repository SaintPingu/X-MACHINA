// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPENEMY_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPENEMY_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_NewMonster;
struct CPkt_NewMonsterBuilder;

struct SPkt_NewMonster;
struct SPkt_NewMonsterBuilder;

struct CPkt_DeadMonster;
struct CPkt_DeadMonsterBuilder;

struct SPkt_DeadMonster;
struct SPkt_DeadMonsterBuilder;

struct CPkt_MonsterTarget;
struct CPkt_MonsterTargetBuilder;

struct SPkt_MonsterTarget;
struct SPkt_MonsterTargetBuilder;

struct CPkt_RemoveMonster;
struct CPkt_RemoveMonsterBuilder;

struct SPkt_RemoveMonster;
struct SPkt_RemoveMonsterBuilder;

struct CPkt_Monster_Transform;
struct CPkt_Monster_TransformBuilder;

struct SPkt_Monster_Transform;
struct SPkt_Monster_TransformBuilder;

struct CPkt_Monster_HP;
struct CPkt_Monster_HPBuilder;

struct SPkt_Monster_HP;
struct SPkt_Monster_HPBuilder;

struct CPkt_Monster_State;
struct CPkt_Monster_StateBuilder;

struct SPkt_Monster_State;
struct SPkt_Monster_StateBuilder;

struct CPkt_NewMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_NewMonsterBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_NewMonsterBuilder {
  typedef CPkt_NewMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_NewMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_NewMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_NewMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_NewMonster> CreateCPkt_NewMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_NewMonsterBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_NewMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_NewMonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_MONSTERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Monster>> *new_monsters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Monster>> *>(VT_NEW_MONSTERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NEW_MONSTERS) &&
           verifier.VerifyVector(new_monsters()) &&
           verifier.VerifyVectorOfTables(new_monsters()) &&
           verifier.EndTable();
  }
};

struct SPkt_NewMonsterBuilder {
  typedef SPkt_NewMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_new_monsters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Monster>>> new_monsters) {
    fbb_.AddOffset(SPkt_NewMonster::VT_NEW_MONSTERS, new_monsters);
  }
  explicit SPkt_NewMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_NewMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_NewMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_NewMonster> CreateSPkt_NewMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Monster>>> new_monsters = 0) {
  SPkt_NewMonsterBuilder builder_(_fbb);
  builder_.add_new_monsters(new_monsters);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_NewMonster> CreateSPkt_NewMonsterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<FBProtocol::Monster>> *new_monsters = nullptr) {
  auto new_monsters__ = new_monsters ? _fbb.CreateVector<::flatbuffers::Offset<FBProtocol::Monster>>(*new_monsters) : 0;
  return FBProtocol::CreateSPkt_NewMonster(
      _fbb,
      new_monsters__);
}

struct CPkt_DeadMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_DeadMonsterBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_DeadMonsterBuilder {
  typedef CPkt_DeadMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_DeadMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_DeadMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_DeadMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_DeadMonster> CreateCPkt_DeadMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_DeadMonsterBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_DeadMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_DeadMonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_DEAD_POINT = 6,
    VT_PHEROS = 8
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const FBProtocol::Position_Vec2 *dead_point() const {
    return GetPointer<const FBProtocol::Position_Vec2 *>(VT_DEAD_POINT);
  }
  const ::flatbuffers::String *pheros() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PHEROS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_DEAD_POINT) &&
           verifier.VerifyTable(dead_point()) &&
           VerifyOffset(verifier, VT_PHEROS) &&
           verifier.VerifyString(pheros()) &&
           verifier.EndTable();
  }
};

struct SPkt_DeadMonsterBuilder {
  typedef SPkt_DeadMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(SPkt_DeadMonster::VT_MONSTER_ID, monster_id, 0);
  }
  void add_dead_point(::flatbuffers::Offset<FBProtocol::Position_Vec2> dead_point) {
    fbb_.AddOffset(SPkt_DeadMonster::VT_DEAD_POINT, dead_point);
  }
  void add_pheros(::flatbuffers::Offset<::flatbuffers::String> pheros) {
    fbb_.AddOffset(SPkt_DeadMonster::VT_PHEROS, pheros);
  }
  explicit SPkt_DeadMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_DeadMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_DeadMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_DeadMonster> CreateSPkt_DeadMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<FBProtocol::Position_Vec2> dead_point = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pheros = 0) {
  SPkt_DeadMonsterBuilder builder_(_fbb);
  builder_.add_pheros(pheros);
  builder_.add_dead_point(dead_point);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_DeadMonster> CreateSPkt_DeadMonsterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<FBProtocol::Position_Vec2> dead_point = 0,
    const char *pheros = nullptr) {
  auto pheros__ = pheros ? _fbb.CreateString(pheros) : 0;
  return FBProtocol::CreateSPkt_DeadMonster(
      _fbb,
      monster_id,
      dead_point,
      pheros__);
}

struct CPkt_MonsterTarget FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_MonsterTargetBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_MonsterTargetBuilder {
  typedef CPkt_MonsterTarget Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_MonsterTargetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_MonsterTarget> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_MonsterTarget>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_MonsterTarget> CreateCPkt_MonsterTarget(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_MonsterTargetBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_MonsterTarget FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_MonsterTargetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_TARGET_PLAYER_ID = 6,
    VT_TARGET_MONTSER_ID = 8
  };
  int32_t monster_id() const {
    return GetField<int32_t>(VT_MONSTER_ID, 0);
  }
  int32_t target_player_id() const {
    return GetField<int32_t>(VT_TARGET_PLAYER_ID, 0);
  }
  int32_t target_montser_id() const {
    return GetField<int32_t>(VT_TARGET_MONTSER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TARGET_PLAYER_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TARGET_MONTSER_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_MonsterTargetBuilder {
  typedef SPkt_MonsterTarget Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(int32_t monster_id) {
    fbb_.AddElement<int32_t>(SPkt_MonsterTarget::VT_MONSTER_ID, monster_id, 0);
  }
  void add_target_player_id(int32_t target_player_id) {
    fbb_.AddElement<int32_t>(SPkt_MonsterTarget::VT_TARGET_PLAYER_ID, target_player_id, 0);
  }
  void add_target_montser_id(int32_t target_montser_id) {
    fbb_.AddElement<int32_t>(SPkt_MonsterTarget::VT_TARGET_MONTSER_ID, target_montser_id, 0);
  }
  explicit SPkt_MonsterTargetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_MonsterTarget> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_MonsterTarget>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_MonsterTarget> CreateSPkt_MonsterTarget(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t monster_id = 0,
    int32_t target_player_id = 0,
    int32_t target_montser_id = 0) {
  SPkt_MonsterTargetBuilder builder_(_fbb);
  builder_.add_target_montser_id(target_montser_id);
  builder_.add_target_player_id(target_player_id);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct CPkt_RemoveMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_RemoveMonsterBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_RemoveMonsterBuilder {
  typedef CPkt_RemoveMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_RemoveMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_RemoveMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_RemoveMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_RemoveMonster> CreateCPkt_RemoveMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_RemoveMonsterBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_RemoveMonster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_RemoveMonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_RemoveMonsterBuilder {
  typedef SPkt_RemoveMonster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(SPkt_RemoveMonster::VT_MONSTER_ID, monster_id, 0);
  }
  explicit SPkt_RemoveMonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_RemoveMonster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_RemoveMonster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_RemoveMonster> CreateSPkt_RemoveMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0) {
  SPkt_RemoveMonsterBuilder builder_(_fbb);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct CPkt_Monster_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Monster_TransformBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_Monster_TransformBuilder {
  typedef CPkt_Monster_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_Monster_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Monster_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Monster_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Monster_Transform> CreateCPkt_Monster_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_Monster_TransformBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_Monster_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Monster_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_POS_2 = 6,
    VT_ROT_Y = 8
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  const FBProtocol::Position_Vec2 *pos_2() const {
    return GetPointer<const FBProtocol::Position_Vec2 *>(VT_POS_2);
  }
  float rot_y() const {
    return GetField<float>(VT_ROT_Y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyOffset(verifier, VT_POS_2) &&
           verifier.VerifyTable(pos_2()) &&
           VerifyField<float>(verifier, VT_ROT_Y, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Monster_TransformBuilder {
  typedef SPkt_Monster_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(SPkt_Monster_Transform::VT_MONSTER_ID, monster_id, 0);
  }
  void add_pos_2(::flatbuffers::Offset<FBProtocol::Position_Vec2> pos_2) {
    fbb_.AddOffset(SPkt_Monster_Transform::VT_POS_2, pos_2);
  }
  void add_rot_y(float rot_y) {
    fbb_.AddElement<float>(SPkt_Monster_Transform::VT_ROT_Y, rot_y, 0.0f);
  }
  explicit SPkt_Monster_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Monster_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Monster_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Monster_Transform> CreateSPkt_Monster_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    ::flatbuffers::Offset<FBProtocol::Position_Vec2> pos_2 = 0,
    float rot_y = 0.0f) {
  SPkt_Monster_TransformBuilder builder_(_fbb);
  builder_.add_rot_y(rot_y);
  builder_.add_pos_2(pos_2);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct CPkt_Monster_HP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Monster_HPBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_Monster_HPBuilder {
  typedef CPkt_Monster_HP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_Monster_HPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Monster_HP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Monster_HP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Monster_HP> CreateCPkt_Monster_HP(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_Monster_HPBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_Monster_HP FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Monster_HPBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_HP = 6
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Monster_HPBuilder {
  typedef SPkt_Monster_HP Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(SPkt_Monster_HP::VT_MONSTER_ID, monster_id, 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(SPkt_Monster_HP::VT_HP, hp, 0.0f);
  }
  explicit SPkt_Monster_HPBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Monster_HP> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Monster_HP>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Monster_HP> CreateSPkt_Monster_HP(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    float hp = 0.0f) {
  SPkt_Monster_HPBuilder builder_(_fbb);
  builder_.add_hp(hp);
  builder_.add_monster_id(monster_id);
  return builder_.Finish();
}

struct CPkt_Monster_State FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Monster_StateBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_Monster_StateBuilder {
  typedef CPkt_Monster_State Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_Monster_StateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Monster_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Monster_State>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Monster_State> CreateCPkt_Monster_State(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_Monster_StateBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_Monster_State FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Monster_StateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MONSTER_ID = 4,
    VT_MONSTER_BT_TYPE = 6,
    VT_MONSTER_BT_STEP = 8
  };
  uint32_t monster_id() const {
    return GetField<uint32_t>(VT_MONSTER_ID, 0);
  }
  FBProtocol::MONSTER_BT_TYPE monster_bt_type() const {
    return static_cast<FBProtocol::MONSTER_BT_TYPE>(GetField<uint8_t>(VT_MONSTER_BT_TYPE, 0));
  }
  int32_t monster_bt_step() const {
    return GetField<int32_t>(VT_MONSTER_BT_STEP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MONSTER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_MONSTER_BT_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_MONSTER_BT_STEP, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Monster_StateBuilder {
  typedef SPkt_Monster_State Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_monster_id(uint32_t monster_id) {
    fbb_.AddElement<uint32_t>(SPkt_Monster_State::VT_MONSTER_ID, monster_id, 0);
  }
  void add_monster_bt_type(FBProtocol::MONSTER_BT_TYPE monster_bt_type) {
    fbb_.AddElement<uint8_t>(SPkt_Monster_State::VT_MONSTER_BT_TYPE, static_cast<uint8_t>(monster_bt_type), 0);
  }
  void add_monster_bt_step(int32_t monster_bt_step) {
    fbb_.AddElement<int32_t>(SPkt_Monster_State::VT_MONSTER_BT_STEP, monster_bt_step, 0);
  }
  explicit SPkt_Monster_StateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Monster_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Monster_State>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Monster_State> CreateSPkt_Monster_State(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t monster_id = 0,
    FBProtocol::MONSTER_BT_TYPE monster_bt_type = FBProtocol::MONSTER_BT_TYPE_NONE,
    int32_t monster_bt_step = 0) {
  SPkt_Monster_StateBuilder builder_(_fbb);
  builder_.add_monster_bt_step(monster_bt_step);
  builder_.add_monster_id(monster_id);
  builder_.add_monster_bt_type(monster_bt_type);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPENEMY_FBPROTOCOL_H_
