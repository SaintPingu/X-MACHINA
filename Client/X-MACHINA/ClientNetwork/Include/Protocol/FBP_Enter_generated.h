// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPENTER_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPENTER_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_EnterLobby;
struct CPkt_EnterLobbyBuilder;

struct SPkt_EnterLobby;
struct SPkt_EnterLobbyBuilder;

struct CPkt_EnterGame;
struct CPkt_EnterGameBuilder;

struct SPkt_EnterGame;
struct SPkt_EnterGameBuilder;

struct CPkt_PlayGame;
struct CPkt_PlayGameBuilder;

struct SPkt_PlayGame;
struct SPkt_PlayGameBuilder;

struct CPkt_EnterLobby FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_EnterLobbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_EnterLobbyBuilder {
  typedef CPkt_EnterLobby Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(CPkt_EnterLobby::VT_PLAYER_ID, player_id, 0);
  }
  explicit CPkt_EnterLobbyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_EnterLobby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_EnterLobby>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_EnterLobby> CreateCPkt_EnterLobby(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0) {
  CPkt_EnterLobbyBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct SPkt_EnterLobby FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_EnterLobbyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORDER = 4,
    VT_MYINFO = 6,
    VT_PLAYERS = 8
  };
  int32_t order() const {
    return GetField<int32_t>(VT_ORDER, 0);
  }
  const FBProtocol::Player *myinfo() const {
    return GetPointer<const FBProtocol::Player *>(VT_MYINFO);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ORDER, 4) &&
           VerifyOffset(verifier, VT_MYINFO) &&
           verifier.VerifyTable(myinfo()) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct SPkt_EnterLobbyBuilder {
  typedef SPkt_EnterLobby Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_order(int32_t order) {
    fbb_.AddElement<int32_t>(SPkt_EnterLobby::VT_ORDER, order, 0);
  }
  void add_myinfo(::flatbuffers::Offset<FBProtocol::Player> myinfo) {
    fbb_.AddOffset(SPkt_EnterLobby::VT_MYINFO, myinfo);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players) {
    fbb_.AddOffset(SPkt_EnterLobby::VT_PLAYERS, players);
  }
  explicit SPkt_EnterLobbyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_EnterLobby> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_EnterLobby>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_EnterLobby> CreateSPkt_EnterLobby(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t order = 0,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players = 0) {
  SPkt_EnterLobbyBuilder builder_(_fbb);
  builder_.add_players(players);
  builder_.add_myinfo(myinfo);
  builder_.add_order(order);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_EnterLobby> CreateSPkt_EnterLobbyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t order = 0,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    const std::vector<::flatbuffers::Offset<FBProtocol::Player>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<FBProtocol::Player>>(*players) : 0;
  return FBProtocol::CreateSPkt_EnterLobby(
      _fbb,
      order,
      myinfo,
      players__);
}

struct CPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_EnterGameBuilder {
  typedef CPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(CPkt_EnterGame::VT_PLAYER_ID, player_id, 0);
  }
  explicit CPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_EnterGame> CreateCPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0) {
  CPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct SPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MYINFO = 4,
    VT_PLAYERS = 6
  };
  const FBProtocol::Player *myinfo() const {
    return GetPointer<const FBProtocol::Player *>(VT_MYINFO);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MYINFO) &&
           verifier.VerifyTable(myinfo()) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct SPkt_EnterGameBuilder {
  typedef SPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_myinfo(::flatbuffers::Offset<FBProtocol::Player> myinfo) {
    fbb_.AddOffset(SPkt_EnterGame::VT_MYINFO, myinfo);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players) {
    fbb_.AddOffset(SPkt_EnterGame::VT_PLAYERS, players);
  }
  explicit SPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_EnterGame> CreateSPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players = 0) {
  SPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_players(players);
  builder_.add_myinfo(myinfo);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_EnterGame> CreateSPkt_EnterGameDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    const std::vector<::flatbuffers::Offset<FBProtocol::Player>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<FBProtocol::Player>>(*players) : 0;
  return FBProtocol::CreateSPkt_EnterGame(
      _fbb,
      myinfo,
      players__);
}

struct CPkt_PlayGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_PlayGameBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_PlayGameBuilder {
  typedef CPkt_PlayGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_PlayGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_PlayGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_PlayGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_PlayGame> CreateCPkt_PlayGame(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_PlayGameBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_PlayGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_PlayGameBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SPkt_PlayGameBuilder {
  typedef SPkt_PlayGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit SPkt_PlayGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_PlayGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_PlayGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_PlayGame> CreateSPkt_PlayGame(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  SPkt_PlayGameBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPENTER_FBPROTOCOL_H_
