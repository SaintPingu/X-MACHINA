// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPPLAYER_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPPLAYER_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_NewPlayer;
struct CPkt_NewPlayerBuilder;

struct SPkt_NewPlayer;
struct SPkt_NewPlayerBuilder;

struct CPkt_RemovePlayer;
struct CPkt_RemovePlayerBuilder;

struct SPkt_RemovePlayer;
struct SPkt_RemovePlayerBuilder;

struct CPkt_PlayerOnSkill;
struct CPkt_PlayerOnSkillBuilder;

struct SPkt_PlayerOnSkill;
struct SPkt_PlayerOnSkillBuilder;

struct CPkt_Player_Transform;
struct CPkt_Player_TransformBuilder;

struct SPkt_Player_Transform;
struct SPkt_Player_TransformBuilder;

struct CPkt_Player_AimRotation;
struct CPkt_Player_AimRotationBuilder;

struct SPkt_Player_AimRotation;
struct SPkt_Player_AimRotationBuilder;

struct CPkt_Player_Animation;
struct CPkt_Player_AnimationBuilder;

struct SPkt_Player_Animation;
struct SPkt_Player_AnimationBuilder;

struct CPkt_Player_Weapon;
struct CPkt_Player_WeaponBuilder;

struct SPkt_Player_Weapon;
struct SPkt_Player_WeaponBuilder;

struct CPkt_Player_State;
struct CPkt_Player_StateBuilder;

struct SPkt_Player_State;
struct SPkt_Player_StateBuilder;

struct CPkt_NewPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_NewPlayerBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_NewPlayerBuilder {
  typedef CPkt_NewPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_NewPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_NewPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_NewPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_NewPlayer> CreateCPkt_NewPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_NewPlayerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_NewPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_NewPlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEWPLAYER = 4
  };
  const FBProtocol::Player *newplayer() const {
    return GetPointer<const FBProtocol::Player *>(VT_NEWPLAYER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NEWPLAYER) &&
           verifier.VerifyTable(newplayer()) &&
           verifier.EndTable();
  }
};

struct SPkt_NewPlayerBuilder {
  typedef SPkt_NewPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_newplayer(::flatbuffers::Offset<FBProtocol::Player> newplayer) {
    fbb_.AddOffset(SPkt_NewPlayer::VT_NEWPLAYER, newplayer);
  }
  explicit SPkt_NewPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_NewPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_NewPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_NewPlayer> CreateSPkt_NewPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Player> newplayer = 0) {
  SPkt_NewPlayerBuilder builder_(_fbb);
  builder_.add_newplayer(newplayer);
  return builder_.Finish();
}

struct CPkt_RemovePlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_RemovePlayerBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_RemovePlayerBuilder {
  typedef CPkt_RemovePlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_RemovePlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_RemovePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_RemovePlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_RemovePlayer> CreateCPkt_RemovePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_RemovePlayerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_RemovePlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_RemovePlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_RemovePlayerBuilder {
  typedef SPkt_RemovePlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_RemovePlayer::VT_PLAYER_ID, player_id, 0);
  }
  explicit SPkt_RemovePlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_RemovePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_RemovePlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_RemovePlayer> CreateSPkt_RemovePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0) {
  SPkt_RemovePlayerBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct CPkt_PlayerOnSkill FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_PlayerOnSkillBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SKILL_TYPE = 4,
    VT_MINDCONTROL_MONSTER_ID = 6
  };
  FBProtocol::PLAYER_SKILL_TYPE skill_type() const {
    return static_cast<FBProtocol::PLAYER_SKILL_TYPE>(GetField<uint8_t>(VT_SKILL_TYPE, 0));
  }
  int32_t mindcontrol_monster_id() const {
    return GetField<int32_t>(VT_MINDCONTROL_MONSTER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SKILL_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_MINDCONTROL_MONSTER_ID, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_PlayerOnSkillBuilder {
  typedef CPkt_PlayerOnSkill Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_skill_type(FBProtocol::PLAYER_SKILL_TYPE skill_type) {
    fbb_.AddElement<uint8_t>(CPkt_PlayerOnSkill::VT_SKILL_TYPE, static_cast<uint8_t>(skill_type), 0);
  }
  void add_mindcontrol_monster_id(int32_t mindcontrol_monster_id) {
    fbb_.AddElement<int32_t>(CPkt_PlayerOnSkill::VT_MINDCONTROL_MONSTER_ID, mindcontrol_monster_id, 0);
  }
  explicit CPkt_PlayerOnSkillBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_PlayerOnSkill> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_PlayerOnSkill>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_PlayerOnSkill> CreateCPkt_PlayerOnSkill(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FBProtocol::PLAYER_SKILL_TYPE skill_type = FBProtocol::PLAYER_SKILL_TYPE_NONE,
    int32_t mindcontrol_monster_id = 0) {
  CPkt_PlayerOnSkillBuilder builder_(_fbb);
  builder_.add_mindcontrol_monster_id(mindcontrol_monster_id);
  builder_.add_skill_type(skill_type);
  return builder_.Finish();
}

struct SPkt_PlayerOnSkill FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_PlayerOnSkillBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_SKILL_TYPE = 6,
    VT_PHERO_AMOUNT = 8,
    VT_MINDCONTROL_MONSTER_ID = 10
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  FBProtocol::PLAYER_SKILL_TYPE skill_type() const {
    return static_cast<FBProtocol::PLAYER_SKILL_TYPE>(GetField<uint8_t>(VT_SKILL_TYPE, 0));
  }
  float phero_amount() const {
    return GetField<float>(VT_PHERO_AMOUNT, 0.0f);
  }
  int32_t mindcontrol_monster_id() const {
    return GetField<int32_t>(VT_MINDCONTROL_MONSTER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_SKILL_TYPE, 1) &&
           VerifyField<float>(verifier, VT_PHERO_AMOUNT, 4) &&
           VerifyField<int32_t>(verifier, VT_MINDCONTROL_MONSTER_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_PlayerOnSkillBuilder {
  typedef SPkt_PlayerOnSkill Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_PlayerOnSkill::VT_PLAYER_ID, player_id, 0);
  }
  void add_skill_type(FBProtocol::PLAYER_SKILL_TYPE skill_type) {
    fbb_.AddElement<uint8_t>(SPkt_PlayerOnSkill::VT_SKILL_TYPE, static_cast<uint8_t>(skill_type), 0);
  }
  void add_phero_amount(float phero_amount) {
    fbb_.AddElement<float>(SPkt_PlayerOnSkill::VT_PHERO_AMOUNT, phero_amount, 0.0f);
  }
  void add_mindcontrol_monster_id(int32_t mindcontrol_monster_id) {
    fbb_.AddElement<int32_t>(SPkt_PlayerOnSkill::VT_MINDCONTROL_MONSTER_ID, mindcontrol_monster_id, 0);
  }
  explicit SPkt_PlayerOnSkillBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_PlayerOnSkill> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_PlayerOnSkill>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_PlayerOnSkill> CreateSPkt_PlayerOnSkill(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    FBProtocol::PLAYER_SKILL_TYPE skill_type = FBProtocol::PLAYER_SKILL_TYPE_NONE,
    float phero_amount = 0.0f,
    int32_t mindcontrol_monster_id = 0) {
  SPkt_PlayerOnSkillBuilder builder_(_fbb);
  builder_.add_mindcontrol_monster_id(mindcontrol_monster_id);
  builder_.add_phero_amount(phero_amount);
  builder_.add_player_id(player_id);
  builder_.add_skill_type(skill_type);
  return builder_.Finish();
}

struct CPkt_Player_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Player_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOVE_STATE = 4,
    VT_LATENCY = 6,
    VT_VELOCITY = 8,
    VT_MOVEDIR = 10,
    VT_TRANS = 12,
    VT_SPINE_LOOK = 14,
    VT_ANIMPARAM_H = 16,
    VT_ANIMPARAM_V = 18
  };
  FBProtocol::PLAYER_MOTION_STATE_TYPE move_state() const {
    return static_cast<FBProtocol::PLAYER_MOTION_STATE_TYPE>(GetField<uint8_t>(VT_MOVE_STATE, 0));
  }
  int64_t latency() const {
    return GetField<int64_t>(VT_LATENCY, 0);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  const FBProtocol::Vector3 *movedir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_MOVEDIR);
  }
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  const FBProtocol::Vector3 *spine_look() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_SPINE_LOOK);
  }
  float animparam_h() const {
    return GetField<float>(VT_ANIMPARAM_H, 0.0f);
  }
  float animparam_v() const {
    return GetField<float>(VT_ANIMPARAM_V, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_STATE, 1) &&
           VerifyField<int64_t>(verifier, VT_LATENCY, 8) &&
           VerifyField<float>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_MOVEDIR) &&
           verifier.VerifyTable(movedir()) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           VerifyOffset(verifier, VT_SPINE_LOOK) &&
           verifier.VerifyTable(spine_look()) &&
           VerifyField<float>(verifier, VT_ANIMPARAM_H, 4) &&
           VerifyField<float>(verifier, VT_ANIMPARAM_V, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_Player_TransformBuilder {
  typedef CPkt_Player_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_move_state(FBProtocol::PLAYER_MOTION_STATE_TYPE move_state) {
    fbb_.AddElement<uint8_t>(CPkt_Player_Transform::VT_MOVE_STATE, static_cast<uint8_t>(move_state), 0);
  }
  void add_latency(int64_t latency) {
    fbb_.AddElement<int64_t>(CPkt_Player_Transform::VT_LATENCY, latency, 0);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(CPkt_Player_Transform::VT_VELOCITY, velocity, 0.0f);
  }
  void add_movedir(::flatbuffers::Offset<FBProtocol::Vector3> movedir) {
    fbb_.AddOffset(CPkt_Player_Transform::VT_MOVEDIR, movedir);
  }
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(CPkt_Player_Transform::VT_TRANS, trans);
  }
  void add_spine_look(::flatbuffers::Offset<FBProtocol::Vector3> spine_look) {
    fbb_.AddOffset(CPkt_Player_Transform::VT_SPINE_LOOK, spine_look);
  }
  void add_animparam_h(float animparam_h) {
    fbb_.AddElement<float>(CPkt_Player_Transform::VT_ANIMPARAM_H, animparam_h, 0.0f);
  }
  void add_animparam_v(float animparam_v) {
    fbb_.AddElement<float>(CPkt_Player_Transform::VT_ANIMPARAM_V, animparam_v, 0.0f);
  }
  explicit CPkt_Player_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Player_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Player_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Player_Transform> CreateCPkt_Player_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FBProtocol::PLAYER_MOTION_STATE_TYPE move_state = FBProtocol::PLAYER_MOTION_STATE_TYPE_NONE,
    int64_t latency = 0,
    float velocity = 0.0f,
    ::flatbuffers::Offset<FBProtocol::Vector3> movedir = 0,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> spine_look = 0,
    float animparam_h = 0.0f,
    float animparam_v = 0.0f) {
  CPkt_Player_TransformBuilder builder_(_fbb);
  builder_.add_latency(latency);
  builder_.add_animparam_v(animparam_v);
  builder_.add_animparam_h(animparam_h);
  builder_.add_spine_look(spine_look);
  builder_.add_trans(trans);
  builder_.add_movedir(movedir);
  builder_.add_velocity(velocity);
  builder_.add_move_state(move_state);
  return builder_.Finish();
}

struct SPkt_Player_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Player_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_MOVE_STATE = 6,
    VT_LATENCY = 8,
    VT_VELOCITY = 10,
    VT_MOVEDIR = 12,
    VT_TRANS = 14,
    VT_SPINE_LOOK = 16,
    VT_ANIMPARAM_H = 18,
    VT_ANIMPARAM_V = 20
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  FBProtocol::PLAYER_MOTION_STATE_TYPE move_state() const {
    return static_cast<FBProtocol::PLAYER_MOTION_STATE_TYPE>(GetField<uint8_t>(VT_MOVE_STATE, 0));
  }
  int64_t latency() const {
    return GetField<int64_t>(VT_LATENCY, 0);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  const FBProtocol::Vector3 *movedir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_MOVEDIR);
  }
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  const FBProtocol::Vector3 *spine_look() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_SPINE_LOOK);
  }
  float animparam_h() const {
    return GetField<float>(VT_ANIMPARAM_H, 0.0f);
  }
  float animparam_v() const {
    return GetField<float>(VT_ANIMPARAM_V, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_STATE, 1) &&
           VerifyField<int64_t>(verifier, VT_LATENCY, 8) &&
           VerifyField<float>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_MOVEDIR) &&
           verifier.VerifyTable(movedir()) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           VerifyOffset(verifier, VT_SPINE_LOOK) &&
           verifier.VerifyTable(spine_look()) &&
           VerifyField<float>(verifier, VT_ANIMPARAM_H, 4) &&
           VerifyField<float>(verifier, VT_ANIMPARAM_V, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Player_TransformBuilder {
  typedef SPkt_Player_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Player_Transform::VT_PLAYER_ID, player_id, 0);
  }
  void add_move_state(FBProtocol::PLAYER_MOTION_STATE_TYPE move_state) {
    fbb_.AddElement<uint8_t>(SPkt_Player_Transform::VT_MOVE_STATE, static_cast<uint8_t>(move_state), 0);
  }
  void add_latency(int64_t latency) {
    fbb_.AddElement<int64_t>(SPkt_Player_Transform::VT_LATENCY, latency, 0);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(SPkt_Player_Transform::VT_VELOCITY, velocity, 0.0f);
  }
  void add_movedir(::flatbuffers::Offset<FBProtocol::Vector3> movedir) {
    fbb_.AddOffset(SPkt_Player_Transform::VT_MOVEDIR, movedir);
  }
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(SPkt_Player_Transform::VT_TRANS, trans);
  }
  void add_spine_look(::flatbuffers::Offset<FBProtocol::Vector3> spine_look) {
    fbb_.AddOffset(SPkt_Player_Transform::VT_SPINE_LOOK, spine_look);
  }
  void add_animparam_h(float animparam_h) {
    fbb_.AddElement<float>(SPkt_Player_Transform::VT_ANIMPARAM_H, animparam_h, 0.0f);
  }
  void add_animparam_v(float animparam_v) {
    fbb_.AddElement<float>(SPkt_Player_Transform::VT_ANIMPARAM_V, animparam_v, 0.0f);
  }
  explicit SPkt_Player_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Player_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Player_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Player_Transform> CreateSPkt_Player_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    FBProtocol::PLAYER_MOTION_STATE_TYPE move_state = FBProtocol::PLAYER_MOTION_STATE_TYPE_NONE,
    int64_t latency = 0,
    float velocity = 0.0f,
    ::flatbuffers::Offset<FBProtocol::Vector3> movedir = 0,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> spine_look = 0,
    float animparam_h = 0.0f,
    float animparam_v = 0.0f) {
  SPkt_Player_TransformBuilder builder_(_fbb);
  builder_.add_latency(latency);
  builder_.add_animparam_v(animparam_v);
  builder_.add_animparam_h(animparam_h);
  builder_.add_spine_look(spine_look);
  builder_.add_trans(trans);
  builder_.add_movedir(movedir);
  builder_.add_velocity(velocity);
  builder_.add_player_id(player_id);
  builder_.add_move_state(move_state);
  return builder_.Finish();
}

struct CPkt_Player_AimRotation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Player_AimRotationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AIM_ROTATION = 4,
    VT_SPINE_ANGLE = 6
  };
  float aim_rotation() const {
    return GetField<float>(VT_AIM_ROTATION, 0.0f);
  }
  float spine_angle() const {
    return GetField<float>(VT_SPINE_ANGLE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_AIM_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_SPINE_ANGLE, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_Player_AimRotationBuilder {
  typedef CPkt_Player_AimRotation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_aim_rotation(float aim_rotation) {
    fbb_.AddElement<float>(CPkt_Player_AimRotation::VT_AIM_ROTATION, aim_rotation, 0.0f);
  }
  void add_spine_angle(float spine_angle) {
    fbb_.AddElement<float>(CPkt_Player_AimRotation::VT_SPINE_ANGLE, spine_angle, 0.0f);
  }
  explicit CPkt_Player_AimRotationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Player_AimRotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Player_AimRotation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Player_AimRotation> CreateCPkt_Player_AimRotation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float aim_rotation = 0.0f,
    float spine_angle = 0.0f) {
  CPkt_Player_AimRotationBuilder builder_(_fbb);
  builder_.add_spine_angle(spine_angle);
  builder_.add_aim_rotation(aim_rotation);
  return builder_.Finish();
}

struct SPkt_Player_AimRotation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Player_AimRotationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_AIM_ROTATION = 6,
    VT_SPINE_ANGLE = 8
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  float aim_rotation() const {
    return GetField<float>(VT_AIM_ROTATION, 0.0f);
  }
  float spine_angle() const {
    return GetField<float>(VT_SPINE_ANGLE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<float>(verifier, VT_AIM_ROTATION, 4) &&
           VerifyField<float>(verifier, VT_SPINE_ANGLE, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Player_AimRotationBuilder {
  typedef SPkt_Player_AimRotation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Player_AimRotation::VT_PLAYER_ID, player_id, 0);
  }
  void add_aim_rotation(float aim_rotation) {
    fbb_.AddElement<float>(SPkt_Player_AimRotation::VT_AIM_ROTATION, aim_rotation, 0.0f);
  }
  void add_spine_angle(float spine_angle) {
    fbb_.AddElement<float>(SPkt_Player_AimRotation::VT_SPINE_ANGLE, spine_angle, 0.0f);
  }
  explicit SPkt_Player_AimRotationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Player_AimRotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Player_AimRotation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Player_AimRotation> CreateSPkt_Player_AimRotation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    float aim_rotation = 0.0f,
    float spine_angle = 0.0f) {
  SPkt_Player_AimRotationBuilder builder_(_fbb);
  builder_.add_spine_angle(spine_angle);
  builder_.add_aim_rotation(aim_rotation);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct CPkt_Player_Animation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Player_AnimationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIMATION_UPPER_INDEX = 4,
    VT_ANIMATION_LOWER_INDEX = 6,
    VT_ANIMATION_PARAM_H = 8,
    VT_ANIMATION_PARAM_V = 10
  };
  int32_t animation_upper_index() const {
    return GetField<int32_t>(VT_ANIMATION_UPPER_INDEX, 0);
  }
  int32_t animation_lower_index() const {
    return GetField<int32_t>(VT_ANIMATION_LOWER_INDEX, 0);
  }
  float animation_param_h() const {
    return GetField<float>(VT_ANIMATION_PARAM_H, 0.0f);
  }
  float animation_param_v() const {
    return GetField<float>(VT_ANIMATION_PARAM_V, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ANIMATION_UPPER_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_ANIMATION_LOWER_INDEX, 4) &&
           VerifyField<float>(verifier, VT_ANIMATION_PARAM_H, 4) &&
           VerifyField<float>(verifier, VT_ANIMATION_PARAM_V, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_Player_AnimationBuilder {
  typedef CPkt_Player_Animation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_animation_upper_index(int32_t animation_upper_index) {
    fbb_.AddElement<int32_t>(CPkt_Player_Animation::VT_ANIMATION_UPPER_INDEX, animation_upper_index, 0);
  }
  void add_animation_lower_index(int32_t animation_lower_index) {
    fbb_.AddElement<int32_t>(CPkt_Player_Animation::VT_ANIMATION_LOWER_INDEX, animation_lower_index, 0);
  }
  void add_animation_param_h(float animation_param_h) {
    fbb_.AddElement<float>(CPkt_Player_Animation::VT_ANIMATION_PARAM_H, animation_param_h, 0.0f);
  }
  void add_animation_param_v(float animation_param_v) {
    fbb_.AddElement<float>(CPkt_Player_Animation::VT_ANIMATION_PARAM_V, animation_param_v, 0.0f);
  }
  explicit CPkt_Player_AnimationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Player_Animation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Player_Animation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Player_Animation> CreateCPkt_Player_Animation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t animation_upper_index = 0,
    int32_t animation_lower_index = 0,
    float animation_param_h = 0.0f,
    float animation_param_v = 0.0f) {
  CPkt_Player_AnimationBuilder builder_(_fbb);
  builder_.add_animation_param_v(animation_param_v);
  builder_.add_animation_param_h(animation_param_h);
  builder_.add_animation_lower_index(animation_lower_index);
  builder_.add_animation_upper_index(animation_upper_index);
  return builder_.Finish();
}

struct SPkt_Player_Animation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Player_AnimationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_ANIMATION_UPPER_INDEX = 6,
    VT_ANIMATION_LOWER_INDEX = 8,
    VT_ANIMATION_PARAM_H = 10,
    VT_ANIMATION_PARAM_V = 12
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  int32_t animation_upper_index() const {
    return GetField<int32_t>(VT_ANIMATION_UPPER_INDEX, 0);
  }
  int32_t animation_lower_index() const {
    return GetField<int32_t>(VT_ANIMATION_LOWER_INDEX, 0);
  }
  float animation_param_h() const {
    return GetField<float>(VT_ANIMATION_PARAM_H, 0.0f);
  }
  float animation_param_v() const {
    return GetField<float>(VT_ANIMATION_PARAM_V, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_ANIMATION_UPPER_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_ANIMATION_LOWER_INDEX, 4) &&
           VerifyField<float>(verifier, VT_ANIMATION_PARAM_H, 4) &&
           VerifyField<float>(verifier, VT_ANIMATION_PARAM_V, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_Player_AnimationBuilder {
  typedef SPkt_Player_Animation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Player_Animation::VT_PLAYER_ID, player_id, 0);
  }
  void add_animation_upper_index(int32_t animation_upper_index) {
    fbb_.AddElement<int32_t>(SPkt_Player_Animation::VT_ANIMATION_UPPER_INDEX, animation_upper_index, 0);
  }
  void add_animation_lower_index(int32_t animation_lower_index) {
    fbb_.AddElement<int32_t>(SPkt_Player_Animation::VT_ANIMATION_LOWER_INDEX, animation_lower_index, 0);
  }
  void add_animation_param_h(float animation_param_h) {
    fbb_.AddElement<float>(SPkt_Player_Animation::VT_ANIMATION_PARAM_H, animation_param_h, 0.0f);
  }
  void add_animation_param_v(float animation_param_v) {
    fbb_.AddElement<float>(SPkt_Player_Animation::VT_ANIMATION_PARAM_V, animation_param_v, 0.0f);
  }
  explicit SPkt_Player_AnimationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Player_Animation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Player_Animation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Player_Animation> CreateSPkt_Player_Animation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    int32_t animation_upper_index = 0,
    int32_t animation_lower_index = 0,
    float animation_param_h = 0.0f,
    float animation_param_v = 0.0f) {
  SPkt_Player_AnimationBuilder builder_(_fbb);
  builder_.add_animation_param_v(animation_param_v);
  builder_.add_animation_param_h(animation_param_h);
  builder_.add_animation_lower_index(animation_lower_index);
  builder_.add_animation_upper_index(animation_upper_index);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

struct CPkt_Player_Weapon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Player_WeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEM_ID = 4,
    VT_WEAPON_TYPE = 6
  };
  uint32_t item_id() const {
    return GetField<uint32_t>(VT_ITEM_ID, 0);
  }
  FBProtocol::ITEM_TYPE weapon_type() const {
    return static_cast<FBProtocol::ITEM_TYPE>(GetField<uint8_t>(VT_WEAPON_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ITEM_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_WEAPON_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct CPkt_Player_WeaponBuilder {
  typedef CPkt_Player_Weapon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_item_id(uint32_t item_id) {
    fbb_.AddElement<uint32_t>(CPkt_Player_Weapon::VT_ITEM_ID, item_id, 0);
  }
  void add_weapon_type(FBProtocol::ITEM_TYPE weapon_type) {
    fbb_.AddElement<uint8_t>(CPkt_Player_Weapon::VT_WEAPON_TYPE, static_cast<uint8_t>(weapon_type), 0);
  }
  explicit CPkt_Player_WeaponBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Player_Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Player_Weapon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Player_Weapon> CreateCPkt_Player_Weapon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t item_id = 0,
    FBProtocol::ITEM_TYPE weapon_type = FBProtocol::ITEM_TYPE_NONE) {
  CPkt_Player_WeaponBuilder builder_(_fbb);
  builder_.add_item_id(item_id);
  builder_.add_weapon_type(weapon_type);
  return builder_.Finish();
}

struct SPkt_Player_Weapon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Player_WeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_WEAPON_TYPE = 6
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  FBProtocol::ITEM_TYPE weapon_type() const {
    return static_cast<FBProtocol::ITEM_TYPE>(GetField<uint8_t>(VT_WEAPON_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<uint8_t>(verifier, VT_WEAPON_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct SPkt_Player_WeaponBuilder {
  typedef SPkt_Player_Weapon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Player_Weapon::VT_PLAYER_ID, player_id, 0);
  }
  void add_weapon_type(FBProtocol::ITEM_TYPE weapon_type) {
    fbb_.AddElement<uint8_t>(SPkt_Player_Weapon::VT_WEAPON_TYPE, static_cast<uint8_t>(weapon_type), 0);
  }
  explicit SPkt_Player_WeaponBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Player_Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Player_Weapon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Player_Weapon> CreateSPkt_Player_Weapon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    FBProtocol::ITEM_TYPE weapon_type = FBProtocol::ITEM_TYPE_NONE) {
  SPkt_Player_WeaponBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_weapon_type(weapon_type);
  return builder_.Finish();
}

struct CPkt_Player_State FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_Player_StateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE_TYPE = 4
  };
  FBProtocol::PLAYER_STATE_TYPE state_type() const {
    return static_cast<FBProtocol::PLAYER_STATE_TYPE>(GetField<uint8_t>(VT_STATE_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct CPkt_Player_StateBuilder {
  typedef CPkt_Player_State Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_state_type(FBProtocol::PLAYER_STATE_TYPE state_type) {
    fbb_.AddElement<uint8_t>(CPkt_Player_State::VT_STATE_TYPE, static_cast<uint8_t>(state_type), 0);
  }
  explicit CPkt_Player_StateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Player_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Player_State>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Player_State> CreateCPkt_Player_State(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    FBProtocol::PLAYER_STATE_TYPE state_type = FBProtocol::PLAYER_STATE_TYPE_NONE) {
  CPkt_Player_StateBuilder builder_(_fbb);
  builder_.add_state_type(state_type);
  return builder_.Finish();
}

struct SPkt_Player_State FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_Player_StateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_HP = 6,
    VT_PHERO = 8,
    VT_STATE_TYPE = 10
  };
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  float phero() const {
    return GetField<float>(VT_PHERO, 0.0f);
  }
  FBProtocol::PLAYER_STATE_TYPE state_type() const {
    return static_cast<FBProtocol::PLAYER_STATE_TYPE>(GetField<uint8_t>(VT_STATE_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           VerifyField<float>(verifier, VT_HP, 4) &&
           VerifyField<float>(verifier, VT_PHERO, 4) &&
           VerifyField<uint8_t>(verifier, VT_STATE_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct SPkt_Player_StateBuilder {
  typedef SPkt_Player_State Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_Player_State::VT_PLAYER_ID, player_id, 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(SPkt_Player_State::VT_HP, hp, 0.0f);
  }
  void add_phero(float phero) {
    fbb_.AddElement<float>(SPkt_Player_State::VT_PHERO, phero, 0.0f);
  }
  void add_state_type(FBProtocol::PLAYER_STATE_TYPE state_type) {
    fbb_.AddElement<uint8_t>(SPkt_Player_State::VT_STATE_TYPE, static_cast<uint8_t>(state_type), 0);
  }
  explicit SPkt_Player_StateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Player_State> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Player_State>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Player_State> CreateSPkt_Player_State(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t player_id = 0,
    float hp = 0.0f,
    float phero = 0.0f,
    FBProtocol::PLAYER_STATE_TYPE state_type = FBProtocol::PLAYER_STATE_TYPE_NONE) {
  SPkt_Player_StateBuilder builder_(_fbb);
  builder_.add_phero(phero);
  builder_.add_hp(hp);
  builder_.add_player_id(player_id);
  builder_.add_state_type(state_type);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPPLAYER_FBPROTOCOL_H_
