// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_LogIn;
struct CPkt_LogInBuilder;

struct SPkt_LogIn;
struct SPkt_LogInBuilder;

struct CPkt_NewPlayer;
struct CPkt_NewPlayerBuilder;

struct SPkt_NewPlayer;
struct SPkt_NewPlayerBuilder;

struct CPkt_RemovePlayer;
struct CPkt_RemovePlayerBuilder;

struct SPkt_RemovePlayer;
struct SPkt_RemovePlayerBuilder;

struct CPkt_EnterGame;
struct CPkt_EnterGameBuilder;

struct SPkt_EnterGame;
struct SPkt_EnterGameBuilder;

struct CPkt_Chat;
struct CPkt_ChatBuilder;

struct SPkt_Chat;
struct SPkt_ChatBuilder;

struct CPkt_Transform;
struct CPkt_TransformBuilder;

struct SPkt_Transform;
struct SPkt_TransformBuilder;

struct CPkt_KeyInput;
struct CPkt_KeyInputBuilder;

struct SPkt_KeyInput;
struct SPkt_KeyInputBuilder;

struct CPkt_NetworkLatency;
struct CPkt_NetworkLatencyBuilder;

struct SPkt_NetworkLatency;
struct SPkt_NetworkLatencyBuilder;

struct CPkt_PlayerState;
struct CPkt_PlayerStateBuilder;

struct SPkt_PlayerState;
struct SPkt_PlayerStateBuilder;

struct CPkt_LogIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_LogInBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_LogInBuilder {
  typedef CPkt_LogIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_LogInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_LogIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_LogIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_LogIn> CreateCPkt_LogIn(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_LogInBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_LogIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_LogInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_MYINFO = 6,
    VT_PLAYERS = 8
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const FBProtocol::Player *myinfo() const {
    return GetPointer<const FBProtocol::Player *>(VT_MYINFO);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_MYINFO) &&
           verifier.VerifyTable(myinfo()) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct SPkt_LogInBuilder {
  typedef SPkt_LogIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(SPkt_LogIn::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_myinfo(::flatbuffers::Offset<FBProtocol::Player> myinfo) {
    fbb_.AddOffset(SPkt_LogIn::VT_MYINFO, myinfo);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players) {
    fbb_.AddOffset(SPkt_LogIn::VT_PLAYERS, players);
  }
  explicit SPkt_LogInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_LogIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_LogIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_LogIn> CreateSPkt_LogIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players = 0) {
  SPkt_LogInBuilder builder_(_fbb);
  builder_.add_players(players);
  builder_.add_myinfo(myinfo);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_LogIn> CreateSPkt_LogInDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<FBProtocol::Player> myinfo = 0,
    const std::vector<::flatbuffers::Offset<FBProtocol::Player>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<FBProtocol::Player>>(*players) : 0;
  return FBProtocol::CreateSPkt_LogIn(
      _fbb,
      success,
      myinfo,
      players__);
}

struct CPkt_NewPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_NewPlayerBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_NewPlayerBuilder {
  typedef CPkt_NewPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_NewPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_NewPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_NewPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_NewPlayer> CreateCPkt_NewPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_NewPlayerBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_NewPlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_NewPlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEWPLAYER = 4
  };
  const FBProtocol::Player *newplayer() const {
    return GetPointer<const FBProtocol::Player *>(VT_NEWPLAYER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NEWPLAYER) &&
           verifier.VerifyTable(newplayer()) &&
           verifier.EndTable();
  }
};

struct SPkt_NewPlayerBuilder {
  typedef SPkt_NewPlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_newplayer(::flatbuffers::Offset<FBProtocol::Player> newplayer) {
    fbb_.AddOffset(SPkt_NewPlayer::VT_NEWPLAYER, newplayer);
  }
  explicit SPkt_NewPlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_NewPlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_NewPlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_NewPlayer> CreateSPkt_NewPlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Player> newplayer = 0) {
  SPkt_NewPlayerBuilder builder_(_fbb);
  builder_.add_newplayer(newplayer);
  return builder_.Finish();
}

struct CPkt_RemovePlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_RemovePlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4
  };
  int32_t playerid() const {
    return GetField<int32_t>(VT_PLAYERID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERID, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_RemovePlayerBuilder {
  typedef CPkt_RemovePlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playerid(int32_t playerid) {
    fbb_.AddElement<int32_t>(CPkt_RemovePlayer::VT_PLAYERID, playerid, 0);
  }
  explicit CPkt_RemovePlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_RemovePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_RemovePlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_RemovePlayer> CreateCPkt_RemovePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t playerid = 0) {
  CPkt_RemovePlayerBuilder builder_(_fbb);
  builder_.add_playerid(playerid);
  return builder_.Finish();
}

struct SPkt_RemovePlayer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_RemovePlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERID = 4
  };
  int32_t playerid() const {
    return GetField<int32_t>(VT_PLAYERID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_RemovePlayerBuilder {
  typedef SPkt_RemovePlayer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playerid(int32_t playerid) {
    fbb_.AddElement<int32_t>(SPkt_RemovePlayer::VT_PLAYERID, playerid, 0);
  }
  explicit SPkt_RemovePlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_RemovePlayer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_RemovePlayer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_RemovePlayer> CreateSPkt_RemovePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t playerid = 0) {
  SPkt_RemovePlayerBuilder builder_(_fbb);
  builder_.add_playerid(playerid);
  return builder_.Finish();
}

struct CPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_INDEX = 4
  };
  uint64_t player_index() const {
    return GetField<uint64_t>(VT_PLAYER_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_INDEX, 8) &&
           verifier.EndTable();
  }
};

struct CPkt_EnterGameBuilder {
  typedef CPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_index(uint64_t player_index) {
    fbb_.AddElement<uint64_t>(CPkt_EnterGame::VT_PLAYER_INDEX, player_index, 0);
  }
  explicit CPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_EnterGame> CreateCPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_index = 0) {
  CPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_player_index(player_index);
  return builder_.Finish();
}

struct SPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct SPkt_EnterGameBuilder {
  typedef SPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(SPkt_EnterGame::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit SPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_EnterGame> CreateSPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  SPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct CPkt_Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct CPkt_ChatBuilder {
  typedef CPkt_Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(CPkt_Chat::VT_MESSAGE, message);
  }
  explicit CPkt_ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Chat> CreateCPkt_Chat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  CPkt_ChatBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CPkt_Chat> CreateCPkt_ChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FBProtocol::CreateCPkt_Chat(
      _fbb,
      message__);
}

struct SPkt_Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_MESSAGE = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SPkt_ChatBuilder {
  typedef SPkt_Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(SPkt_Chat::VT_PLAYER_ID, player_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(SPkt_Chat::VT_MESSAGE, message);
  }
  explicit SPkt_ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Chat> CreateSPkt_Chat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  SPkt_ChatBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_Chat> CreateSPkt_ChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FBProtocol::CreateSPkt_Chat(
      _fbb,
      player_id,
      message__);
}

struct CPkt_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LATENCY = 4,
    VT_VELOCITY = 6,
    VT_MOVEDIR = 8,
    VT_TRANS = 10,
    VT_SPINE_LOOK = 12
  };
  int64_t latency() const {
    return GetField<int64_t>(VT_LATENCY, 0);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  const FBProtocol::Vector3 *movedir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_MOVEDIR);
  }
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  const FBProtocol::Vector3 *spine_look() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_SPINE_LOOK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_LATENCY, 8) &&
           VerifyField<float>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_MOVEDIR) &&
           verifier.VerifyTable(movedir()) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           VerifyOffset(verifier, VT_SPINE_LOOK) &&
           verifier.VerifyTable(spine_look()) &&
           verifier.EndTable();
  }
};

struct CPkt_TransformBuilder {
  typedef CPkt_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_latency(int64_t latency) {
    fbb_.AddElement<int64_t>(CPkt_Transform::VT_LATENCY, latency, 0);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(CPkt_Transform::VT_VELOCITY, velocity, 0.0f);
  }
  void add_movedir(::flatbuffers::Offset<FBProtocol::Vector3> movedir) {
    fbb_.AddOffset(CPkt_Transform::VT_MOVEDIR, movedir);
  }
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(CPkt_Transform::VT_TRANS, trans);
  }
  void add_spine_look(::flatbuffers::Offset<FBProtocol::Vector3> spine_look) {
    fbb_.AddOffset(CPkt_Transform::VT_SPINE_LOOK, spine_look);
  }
  explicit CPkt_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Transform> CreateCPkt_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t latency = 0,
    float velocity = 0.0f,
    ::flatbuffers::Offset<FBProtocol::Vector3> movedir = 0,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> spine_look = 0) {
  CPkt_TransformBuilder builder_(_fbb);
  builder_.add_latency(latency);
  builder_.add_spine_look(spine_look);
  builder_.add_trans(trans);
  builder_.add_movedir(movedir);
  builder_.add_velocity(velocity);
  return builder_.Finish();
}

struct SPkt_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_LATENCY = 6,
    VT_VELOCITY = 8,
    VT_MOVEDIR = 10,
    VT_TRANS = 12,
    VT_SPINE_LOOK = 14
  };
  uint64_t object_id() const {
    return GetField<uint64_t>(VT_OBJECT_ID, 0);
  }
  int64_t latency() const {
    return GetField<int64_t>(VT_LATENCY, 0);
  }
  float velocity() const {
    return GetField<float>(VT_VELOCITY, 0.0f);
  }
  const FBProtocol::Vector3 *movedir() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_MOVEDIR);
  }
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  const FBProtocol::Vector3 *spine_look() const {
    return GetPointer<const FBProtocol::Vector3 *>(VT_SPINE_LOOK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_ID, 8) &&
           VerifyField<int64_t>(verifier, VT_LATENCY, 8) &&
           VerifyField<float>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_MOVEDIR) &&
           verifier.VerifyTable(movedir()) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           VerifyOffset(verifier, VT_SPINE_LOOK) &&
           verifier.VerifyTable(spine_look()) &&
           verifier.EndTable();
  }
};

struct SPkt_TransformBuilder {
  typedef SPkt_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint64_t object_id) {
    fbb_.AddElement<uint64_t>(SPkt_Transform::VT_OBJECT_ID, object_id, 0);
  }
  void add_latency(int64_t latency) {
    fbb_.AddElement<int64_t>(SPkt_Transform::VT_LATENCY, latency, 0);
  }
  void add_velocity(float velocity) {
    fbb_.AddElement<float>(SPkt_Transform::VT_VELOCITY, velocity, 0.0f);
  }
  void add_movedir(::flatbuffers::Offset<FBProtocol::Vector3> movedir) {
    fbb_.AddOffset(SPkt_Transform::VT_MOVEDIR, movedir);
  }
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(SPkt_Transform::VT_TRANS, trans);
  }
  void add_spine_look(::flatbuffers::Offset<FBProtocol::Vector3> spine_look) {
    fbb_.AddOffset(SPkt_Transform::VT_SPINE_LOOK, spine_look);
  }
  explicit SPkt_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Transform> CreateSPkt_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t object_id = 0,
    int64_t latency = 0,
    float velocity = 0.0f,
    ::flatbuffers::Offset<FBProtocol::Vector3> movedir = 0,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0,
    ::flatbuffers::Offset<FBProtocol::Vector3> spine_look = 0) {
  SPkt_TransformBuilder builder_(_fbb);
  builder_.add_latency(latency);
  builder_.add_object_id(object_id);
  builder_.add_spine_look(spine_look);
  builder_.add_trans(trans);
  builder_.add_movedir(movedir);
  builder_.add_velocity(velocity);
  return builder_.Finish();
}

struct CPkt_KeyInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_KeyInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYINPUT_STATE = 4,
    VT_KEYINPUT = 6,
    VT_KEYINPUT_MOVE = 8,
    VT_MOUSE_DELTA = 10
  };
  uint8_t keyinput_state() const {
    return GetField<uint8_t>(VT_KEYINPUT_STATE, 0);
  }
  uint8_t keyinput() const {
    return GetField<uint8_t>(VT_KEYINPUT, 0);
  }
  uint8_t keyinput_move() const {
    return GetField<uint8_t>(VT_KEYINPUT_MOVE, 0);
  }
  const FBProtocol::Vector2 *mouse_delta() const {
    return GetPointer<const FBProtocol::Vector2 *>(VT_MOUSE_DELTA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT_STATE, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT_MOVE, 1) &&
           VerifyOffset(verifier, VT_MOUSE_DELTA) &&
           verifier.VerifyTable(mouse_delta()) &&
           verifier.EndTable();
  }
};

struct CPkt_KeyInputBuilder {
  typedef CPkt_KeyInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keyinput_state(uint8_t keyinput_state) {
    fbb_.AddElement<uint8_t>(CPkt_KeyInput::VT_KEYINPUT_STATE, keyinput_state, 0);
  }
  void add_keyinput(uint8_t keyinput) {
    fbb_.AddElement<uint8_t>(CPkt_KeyInput::VT_KEYINPUT, keyinput, 0);
  }
  void add_keyinput_move(uint8_t keyinput_move) {
    fbb_.AddElement<uint8_t>(CPkt_KeyInput::VT_KEYINPUT_MOVE, keyinput_move, 0);
  }
  void add_mouse_delta(::flatbuffers::Offset<FBProtocol::Vector2> mouse_delta) {
    fbb_.AddOffset(CPkt_KeyInput::VT_MOUSE_DELTA, mouse_delta);
  }
  explicit CPkt_KeyInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_KeyInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_KeyInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_KeyInput> CreateCPkt_KeyInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t keyinput_state = 0,
    uint8_t keyinput = 0,
    uint8_t keyinput_move = 0,
    ::flatbuffers::Offset<FBProtocol::Vector2> mouse_delta = 0) {
  CPkt_KeyInputBuilder builder_(_fbb);
  builder_.add_mouse_delta(mouse_delta);
  builder_.add_keyinput_move(keyinput_move);
  builder_.add_keyinput(keyinput);
  builder_.add_keyinput_state(keyinput_state);
  return builder_.Finish();
}

struct SPkt_KeyInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_KeyInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_KEYINPUT_STATE = 6,
    VT_KEYINPUT = 8,
    VT_KEYINPUT_MOVE = 10,
    VT_MOUSE_DELTA = 12
  };
  uint64_t object_id() const {
    return GetField<uint64_t>(VT_OBJECT_ID, 0);
  }
  uint8_t keyinput_state() const {
    return GetField<uint8_t>(VT_KEYINPUT_STATE, 0);
  }
  uint8_t keyinput() const {
    return GetField<uint8_t>(VT_KEYINPUT, 0);
  }
  uint8_t keyinput_move() const {
    return GetField<uint8_t>(VT_KEYINPUT_MOVE, 0);
  }
  const FBProtocol::Vector2 *mouse_delta() const {
    return GetPointer<const FBProtocol::Vector2 *>(VT_MOUSE_DELTA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT_STATE, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT_MOVE, 1) &&
           VerifyOffset(verifier, VT_MOUSE_DELTA) &&
           verifier.VerifyTable(mouse_delta()) &&
           verifier.EndTable();
  }
};

struct SPkt_KeyInputBuilder {
  typedef SPkt_KeyInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint64_t object_id) {
    fbb_.AddElement<uint64_t>(SPkt_KeyInput::VT_OBJECT_ID, object_id, 0);
  }
  void add_keyinput_state(uint8_t keyinput_state) {
    fbb_.AddElement<uint8_t>(SPkt_KeyInput::VT_KEYINPUT_STATE, keyinput_state, 0);
  }
  void add_keyinput(uint8_t keyinput) {
    fbb_.AddElement<uint8_t>(SPkt_KeyInput::VT_KEYINPUT, keyinput, 0);
  }
  void add_keyinput_move(uint8_t keyinput_move) {
    fbb_.AddElement<uint8_t>(SPkt_KeyInput::VT_KEYINPUT_MOVE, keyinput_move, 0);
  }
  void add_mouse_delta(::flatbuffers::Offset<FBProtocol::Vector2> mouse_delta) {
    fbb_.AddOffset(SPkt_KeyInput::VT_MOUSE_DELTA, mouse_delta);
  }
  explicit SPkt_KeyInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_KeyInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_KeyInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_KeyInput> CreateSPkt_KeyInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t object_id = 0,
    uint8_t keyinput_state = 0,
    uint8_t keyinput = 0,
    uint8_t keyinput_move = 0,
    ::flatbuffers::Offset<FBProtocol::Vector2> mouse_delta = 0) {
  SPkt_KeyInputBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_mouse_delta(mouse_delta);
  builder_.add_keyinput_move(keyinput_move);
  builder_.add_keyinput(keyinput);
  builder_.add_keyinput_state(keyinput_state);
  return builder_.Finish();
}

struct CPkt_NetworkLatency FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_NetworkLatencyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4
  };
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct CPkt_NetworkLatencyBuilder {
  typedef CPkt_NetworkLatency Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(CPkt_NetworkLatency::VT_TIMESTAMP, timestamp, 0);
  }
  explicit CPkt_NetworkLatencyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_NetworkLatency> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_NetworkLatency>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_NetworkLatency> CreateCPkt_NetworkLatency(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t timestamp = 0) {
  CPkt_NetworkLatencyBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

struct SPkt_NetworkLatency FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_NetworkLatencyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4
  };
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP, 8) &&
           verifier.EndTable();
  }
};

struct SPkt_NetworkLatencyBuilder {
  typedef SPkt_NetworkLatency Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(SPkt_NetworkLatency::VT_TIMESTAMP, timestamp, 0);
  }
  explicit SPkt_NetworkLatencyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_NetworkLatency> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_NetworkLatency>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_NetworkLatency> CreateSPkt_NetworkLatency(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t timestamp = 0) {
  SPkt_NetworkLatencyBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

struct CPkt_PlayerState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_PlayerStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WEAPON_TYPE = 4,
    VT_PLAYER_MOTION_STATE = 6
  };
  uint8_t weapon_type() const {
    return GetField<uint8_t>(VT_WEAPON_TYPE, 0);
  }
  uint32_t player_motion_state() const {
    return GetField<uint32_t>(VT_PLAYER_MOTION_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WEAPON_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_MOTION_STATE, 4) &&
           verifier.EndTable();
  }
};

struct CPkt_PlayerStateBuilder {
  typedef CPkt_PlayerState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_weapon_type(uint8_t weapon_type) {
    fbb_.AddElement<uint8_t>(CPkt_PlayerState::VT_WEAPON_TYPE, weapon_type, 0);
  }
  void add_player_motion_state(uint32_t player_motion_state) {
    fbb_.AddElement<uint32_t>(CPkt_PlayerState::VT_PLAYER_MOTION_STATE, player_motion_state, 0);
  }
  explicit CPkt_PlayerStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_PlayerState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_PlayerState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_PlayerState> CreateCPkt_PlayerState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t weapon_type = 0,
    uint32_t player_motion_state = 0) {
  CPkt_PlayerStateBuilder builder_(_fbb);
  builder_.add_player_motion_state(player_motion_state);
  builder_.add_weapon_type(weapon_type);
  return builder_.Finish();
}

struct SPkt_PlayerState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_PlayerStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_WEAPON_TYPE = 6,
    VT_PLAYER_MOTION_STATE = 8
  };
  uint64_t object_id() const {
    return GetField<uint64_t>(VT_OBJECT_ID, 0);
  }
  uint8_t weapon_type() const {
    return GetField<uint8_t>(VT_WEAPON_TYPE, 0);
  }
  uint32_t player_motion_state() const {
    return GetField<uint32_t>(VT_PLAYER_MOTION_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_ID, 8) &&
           VerifyField<uint8_t>(verifier, VT_WEAPON_TYPE, 1) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_MOTION_STATE, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_PlayerStateBuilder {
  typedef SPkt_PlayerState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint64_t object_id) {
    fbb_.AddElement<uint64_t>(SPkt_PlayerState::VT_OBJECT_ID, object_id, 0);
  }
  void add_weapon_type(uint8_t weapon_type) {
    fbb_.AddElement<uint8_t>(SPkt_PlayerState::VT_WEAPON_TYPE, weapon_type, 0);
  }
  void add_player_motion_state(uint32_t player_motion_state) {
    fbb_.AddElement<uint32_t>(SPkt_PlayerState::VT_PLAYER_MOTION_STATE, player_motion_state, 0);
  }
  explicit SPkt_PlayerStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_PlayerState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_PlayerState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_PlayerState> CreateSPkt_PlayerState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t object_id = 0,
    uint8_t weapon_type = 0,
    uint32_t player_motion_state = 0) {
  SPkt_PlayerStateBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_player_motion_state(player_motion_state);
  builder_.add_weapon_type(weapon_type);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_
