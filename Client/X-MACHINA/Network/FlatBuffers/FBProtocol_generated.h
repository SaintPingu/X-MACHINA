// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_LogIn;
struct CPkt_LogInBuilder;

struct SPkt_LogIn;
struct SPkt_LogInBuilder;

struct CPkt_EnterGame;
struct CPkt_EnterGameBuilder;

struct SPkt_EnterGame;
struct SPkt_EnterGameBuilder;

struct CPkt_Chat;
struct CPkt_ChatBuilder;

struct SPkt_Chat;
struct SPkt_ChatBuilder;

struct CPkt_Transform;
struct CPkt_TransformBuilder;

struct SPkt_Transform;
struct SPkt_TransformBuilder;

struct CPkt_KeyInput;
struct CPkt_KeyInputBuilder;

struct SPkt_KeyInput;
struct SPkt_KeyInputBuilder;

struct CPkt_LogIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_LogInBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_LogInBuilder {
  typedef CPkt_LogIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_LogInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_LogIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_LogIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_LogIn> CreateCPkt_LogIn(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_LogInBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_LogIn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_LogInBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_PLAYERS = 6
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>> *>(VT_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct SPkt_LogInBuilder {
  typedef SPkt_LogIn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(SPkt_LogIn::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players) {
    fbb_.AddOffset(SPkt_LogIn::VT_PLAYERS, players);
  }
  explicit SPkt_LogInBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_LogIn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_LogIn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_LogIn> CreateSPkt_LogIn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<FBProtocol::Player>>> players = 0) {
  SPkt_LogInBuilder builder_(_fbb);
  builder_.add_players(players);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_LogIn> CreateSPkt_LogInDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const std::vector<::flatbuffers::Offset<FBProtocol::Player>> *players = nullptr) {
  auto players__ = players ? _fbb.CreateVector<::flatbuffers::Offset<FBProtocol::Player>>(*players) : 0;
  return FBProtocol::CreateSPkt_LogIn(
      _fbb,
      success,
      players__);
}

struct CPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_INDEX = 4
  };
  uint64_t player_index() const {
    return GetField<uint64_t>(VT_PLAYER_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_INDEX, 8) &&
           verifier.EndTable();
  }
};

struct CPkt_EnterGameBuilder {
  typedef CPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_index(uint64_t player_index) {
    fbb_.AddElement<uint64_t>(CPkt_EnterGame::VT_PLAYER_INDEX, player_index, 0);
  }
  explicit CPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_EnterGame> CreateCPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_index = 0) {
  CPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_player_index(player_index);
  return builder_.Finish();
}

struct SPkt_EnterGame FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_EnterGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct SPkt_EnterGameBuilder {
  typedef SPkt_EnterGame Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(SPkt_EnterGame::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit SPkt_EnterGameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_EnterGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_EnterGame>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_EnterGame> CreateSPkt_EnterGame(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false) {
  SPkt_EnterGameBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct CPkt_Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct CPkt_ChatBuilder {
  typedef CPkt_Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(CPkt_Chat::VT_MESSAGE, message);
  }
  explicit CPkt_ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Chat> CreateCPkt_Chat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  CPkt_ChatBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CPkt_Chat> CreateCPkt_ChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FBProtocol::CreateCPkt_Chat(
      _fbb,
      message__);
}

struct SPkt_Chat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_ChatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_MESSAGE = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SPkt_ChatBuilder {
  typedef SPkt_Chat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(SPkt_Chat::VT_PLAYER_ID, player_id, 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(SPkt_Chat::VT_MESSAGE, message);
  }
  explicit SPkt_ChatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Chat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Chat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Chat> CreateSPkt_Chat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  SPkt_ChatBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_message(message);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SPkt_Chat> CreateSPkt_ChatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return FBProtocol::CreateSPkt_Chat(
      _fbb,
      player_id,
      message__);
}

struct CPkt_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TRANS = 4
  };
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           verifier.EndTable();
  }
};

struct CPkt_TransformBuilder {
  typedef CPkt_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(CPkt_Transform::VT_TRANS, trans);
  }
  explicit CPkt_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_Transform> CreateCPkt_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0) {
  CPkt_TransformBuilder builder_(_fbb);
  builder_.add_trans(trans);
  return builder_.Finish();
}

struct SPkt_Transform FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_TransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_TRANS = 6
  };
  uint64_t object_id() const {
    return GetField<uint64_t>(VT_OBJECT_ID, 0);
  }
  const FBProtocol::Transform *trans() const {
    return GetPointer<const FBProtocol::Transform *>(VT_TRANS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT_ID, 8) &&
           VerifyOffset(verifier, VT_TRANS) &&
           verifier.VerifyTable(trans()) &&
           verifier.EndTable();
  }
};

struct SPkt_TransformBuilder {
  typedef SPkt_Transform Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint64_t object_id) {
    fbb_.AddElement<uint64_t>(SPkt_Transform::VT_OBJECT_ID, object_id, 0);
  }
  void add_trans(::flatbuffers::Offset<FBProtocol::Transform> trans) {
    fbb_.AddOffset(SPkt_Transform::VT_TRANS, trans);
  }
  explicit SPkt_TransformBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_Transform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_Transform>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_Transform> CreateSPkt_Transform(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t object_id = 0,
    ::flatbuffers::Offset<FBProtocol::Transform> trans = 0) {
  SPkt_TransformBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_trans(trans);
  return builder_.Finish();
}

struct CPkt_KeyInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_KeyInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYINPUT_STATE = 4,
    VT_KEYINPUT = 6
  };
  uint8_t keyinput_state() const {
    return GetField<uint8_t>(VT_KEYINPUT_STATE, 0);
  }
  uint8_t keyinput() const {
    return GetField<uint8_t>(VT_KEYINPUT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT_STATE, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYINPUT, 1) &&
           verifier.EndTable();
  }
};

struct CPkt_KeyInputBuilder {
  typedef CPkt_KeyInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keyinput_state(uint8_t keyinput_state) {
    fbb_.AddElement<uint8_t>(CPkt_KeyInput::VT_KEYINPUT_STATE, keyinput_state, 0);
  }
  void add_keyinput(uint8_t keyinput) {
    fbb_.AddElement<uint8_t>(CPkt_KeyInput::VT_KEYINPUT, keyinput, 0);
  }
  explicit CPkt_KeyInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_KeyInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_KeyInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_KeyInput> CreateCPkt_KeyInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t keyinput_state = 0,
    uint8_t keyinput = 0) {
  CPkt_KeyInputBuilder builder_(_fbb);
  builder_.add_keyinput(keyinput);
  builder_.add_keyinput_state(keyinput_state);
  return builder_.Finish();
}

struct SPkt_KeyInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_KeyInputBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SPkt_KeyInputBuilder {
  typedef SPkt_KeyInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit SPkt_KeyInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_KeyInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_KeyInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_KeyInput> CreateSPkt_KeyInput(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  SPkt_KeyInputBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPROTOCOL_FBPROTOCOL_H_
