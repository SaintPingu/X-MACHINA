// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPPHERO_FBPROTOCOL_H_
#define FLATBUFFERS_GENERATED_FBPPHERO_FBPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Enum_generated.h"
#include "Struct_generated.h"
#include "Transform_generated.h"

namespace FBProtocol {

struct CPkt_GetPhero;
struct CPkt_GetPheroBuilder;

struct SPkt_GetPhero;
struct SPkt_GetPheroBuilder;

struct CPkt_GetPhero FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CPkt_GetPheroBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct CPkt_GetPheroBuilder {
  typedef CPkt_GetPhero Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit CPkt_GetPheroBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CPkt_GetPhero> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CPkt_GetPhero>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CPkt_GetPhero> CreateCPkt_GetPhero(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  CPkt_GetPheroBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SPkt_GetPhero FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SPkt_GetPheroBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PHERO_ID = 4,
    VT_PLAYER_ID = 6
  };
  uint32_t phero_id() const {
    return GetField<uint32_t>(VT_PHERO_ID, 0);
  }
  uint32_t player_id() const {
    return GetField<uint32_t>(VT_PLAYER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PHERO_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_PLAYER_ID, 4) &&
           verifier.EndTable();
  }
};

struct SPkt_GetPheroBuilder {
  typedef SPkt_GetPhero Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_phero_id(uint32_t phero_id) {
    fbb_.AddElement<uint32_t>(SPkt_GetPhero::VT_PHERO_ID, phero_id, 0);
  }
  void add_player_id(uint32_t player_id) {
    fbb_.AddElement<uint32_t>(SPkt_GetPhero::VT_PLAYER_ID, player_id, 0);
  }
  explicit SPkt_GetPheroBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SPkt_GetPhero> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SPkt_GetPhero>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SPkt_GetPhero> CreateSPkt_GetPhero(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t phero_id = 0,
    uint32_t player_id = 0) {
  SPkt_GetPheroBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_phero_id(phero_id);
  return builder_.Finish();
}

}  // namespace FBProtocol

#endif  // FLATBUFFERS_GENERATED_FBPPHERO_FBPROTOCOL_H_
